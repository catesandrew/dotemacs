* TODOs

** TODO http://spacemacs.org/layers/+emacs/org/README.html

** TODO [[http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html][orgtutorial_dto]]

** TODO [[http://howardism.org/Technical/Emacs/literate-devops.html][Literate DevOps]]

** TODO [[http://www.howardism.org/Technical/Emacs/literate-database.html][Literate Database Work]]

** TODO [[https://github.com/fniessen/org-html-themes.git][org html themes]]

** DONE [[https://raw.githubusercontent.com/IvanMalison/dotfiles/master/dotfiles/emacs.d/README.org][eamcs.d dotfiles]]
   CLOSED: [2018-03-30 Fri 22:59]
   - State "DONE"       from "TODO"       [2018-03-30 Fri 22:59]
** TODO [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text]]

** TODO [[https://orgmode.org/guide/index.htm][The Compact Org-mode Guide]]

** TODO [[https://orgmode.org/manual/index.html][The Org Manual]]

** TODO [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/][my workflow with org-agenda by gjstein]]

*** TODO [[https://github.com/gjstein/emacs.d/blob/master/config/gs-org.el][dotfiles by gjstein]]

** TODO [[http://www.howardism.org/Technical/Learning/index.html][Teching Programming to Kids]]

** DONE [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig into Org Mode]]
   CLOSED: [2018-04-02 Mon 07:49]

   - State "DONE"       from "TODO"       [2018-04-02 Mon 07:49]
** DONE [[https://meta.caspershire.net/spacemacs-and-org-mode/][Spacemacs and Org-mode]]
   CLOSED: [2018-03-30 Fri 22:58]
   - State "DONE"       from "TODO"       [2018-03-30 Fri 22:58]

* Key bindings

** Starting org-mode

| Key Binding   | Description                                                               |
|---------------+---------------------------------------------------------------------------|
| ~SPC a o #~   | org agenda list stuck projects                                            |
| ~SPC a o /~   | org occur in agenda files                                                 |
| ~SPC a o a~   | org agenda list                                                           |
| ~SPC a o c~   | org capture                                                               |
| ~SPC a o e~   | org store agenda views                                                    |
| ~SPC a o k g~ | org goto last clocked-in clock (go to specific recent clock with ~SPC u~) |
| ~SPC a o k i~ | org clock in last                                                         |
| ~SPC a o k j~ | org jump to current clock                                                 |
| ~SPC a o k o~ | org clock out                                                             |
| ~SPC a o k r~ | org resolve clocks                                                        |
| ~SPC a o l~   | org store link                                                            |
| ~SPC a o m~   | org tags view                                                             |
| ~SPC a o o~   | org agenda                                                                |
| ~SPC a o s~   | org search view                                                           |
| ~SPC a o t~   | org todo list                                                             |
| ~SPC C c~     | org-capture                                                               |

** Toggles

| Key Binding | Description                                   |
|-------------+-----------------------------------------------|
| ~SPC m T c~ | org-toggle-checkbox                           |
| ~SPC m T e~ | org-toggle-pretty-entities                    |
| ~SPC m T i~ | org-toggle-inline-images                      |
| ~SPC m T l~ | org-toggle-link-display                       |
| ~SPC m T t~ | org-show-todo-tree                            |
| ~SPC m T T~ | org-todo                                      |
| ~SPC m T V~ | toggle =space-doc-mode= a read-only view mode |
| ~SPC m T x~ | org-preview-latex-fragment                    |

** Org-mode

| Key Binding                                  | Description                                  |
|----------------------------------------------+----------------------------------------------|
| ~SPC m <dotspacemacs-major-mode-leader-key>~ | org-ctrl-c-ctrl-c                            |
| ~SPC m *~                                    | org-ctrl-c-star                              |
| ~SPC m RET~                                  | org-ctrl-c-ret                               |
| ~SPC m -~                                    | org-ctrl-c-minus                             |
| ~SPC m 'â€‹~                                    | org-edit-special                             |
| ~SPC m a~                                    | org-agenda                                   |
| ~SPC m A~                                    | org-attach                                   |
| ~SPC m c~                                    | org-capture                                  |
| ~SPC m C c~                                  | org-clock-cancel                             |
| ~SPC m C g~                                  | evil-org-recompute-clocks                    |
| ~SPC m C i~                                  | org-clock-in                                 |
| ~SPC m C o~                                  | org-clock-out                                |
| ~SPC m C r~                                  | org-resolve-clocks                           |
| ~SPC m d d~                                  | org-deadline                                 |
| ~SPC m d s~                                  | org-schedule                                 |
| ~SPC m d t~                                  | org-time-stamp                               |
| ~SPC m d T~                                  | org-time-stamp-inactive                      |
| ~SPC m e e~                                  | org-export-dispatch                          |
| ~SPC m e m~                                  | send current buffer as HTML email message    |
| ~SPC m l~                                    | org-open-at-point                            |
| ~SPC m L~                                    | org-shiftright                               |
| ~SPC m H~                                    | org-shiftleft                                |
| ~SPC m K~                                    | org-shiftup                                  |
| ~SPC m J~                                    | org-shiftdown                                |
| ~SPC m C-S-l~                                | org-shiftcontrolright                        |
| ~SPC m C-S-h~                                | org-shiftcontrolleft                         |
| ~SPC m C-S-j~                                | org-shiftcontroldown                         |
| ~SPC m C-S-k~                                | org-shiftcontrolup                           |
| ~SPC s j~                                    | spacemacs/jump-in-buffer (jump to a heading) |

** Org with evil-org-mode
Please see the [[https://github.com/Somelauw/evil-org-mode/blob/master/doc/keythemes.org][evil-org documentation]] for additional instructions on customizing
=evil-org-mode=.

| Key Binding   | Description                     |
|---------------+---------------------------------|
| ~gj~ / ~gk~   | Next/previous element (heading) |
| ~gh~ / ~gl~   | Parent/child element (heading)  |
| ~gH~          | Root heading                    |
| ~ae~          | Element text object             |
| ~ar~          | Subtree text object             |
| ~M-j~ / ~M-k~ | Move heading                    |
| ~M-h~ / ~M-l~ | Promote or demote heading       |
| ~M-J~ / ~M-K~ | Move subtree                    |
| ~M-H~ / ~M-L~ | Promote or demote subtree       |
| ~>>~ / ~<<~   | Promote or demote heading       |

If the layer variable =org-want-todo-bindings= is true, the following bindings
are also available.

| Key Bindings | Description                         |
|--------------+-------------------------------------|
| ~t~          | Cycle TODO state of current heading |
| ~T~          | Insert new TODO heading             |
| ~M-t~        | Insert new TODO sub-heading         |

** Tables

| Key Binding   | Description                                                                |
|---------------+----------------------------------------------------------------------------|
| ~SPC m t a~   | Align the table at point by aligning all vertical bars                     |
| ~SPC m t b~   | Blank the current table field or active region                             |
| ~SPC m t c~   | Convert from =org-mode= table to table.el and back                         |
| ~SPC m t d c~ | Delete a column from the table                                             |
| ~SPC m t d r~ | Delete the current row or horizontal line from the table                   |
| ~SPC m t e~   | Replace the table field value at the cursor by the result of a calculation |
| ~SPC m t E~   | Export table to a file, with configurable format                           |
| ~SPC m t h~   | Go to the previous field in the table                                      |
| ~SPC m t H~   | Move column to the left                                                    |
| ~SPC m t i c~ | Insert a new column into the table                                         |
| ~SPC m t i h~ | Insert a horizontal-line below the current line into the table             |
| ~SPC m t i H~ | Insert a hline and move to the row below that line                         |
| ~SPC m t i r~ | Insert a new row above the current line into the table                     |
| ~SPC m t I~   | Import a file as a table                                                   |
| ~SPC m t j~   | Go to the next row (same column) in the current table                      |
| ~SPC m t J~   | Move table row down                                                        |
| ~SPC m t K~   | Move table row up                                                          |
| ~SPC m t l~   | Go to the next field in the current table, creating new lines as needed    |
| ~SPC m t L~   | Move column to the right                                                   |
| ~SPC m t n~   | Query for a size and insert a table skeleton                               |
| ~SPC m t N~   | Use the table.el package to insert a new table                             |
| ~SPC m t p~   | Plot the table using org-plot/gnuplot                                      |
| ~SPC m t r~   | Recalculate the current table line by applying all stored formulas         |
| ~SPC m t s~   | Sort table lines according to the column at point                          |
| ~SPC m t t f~ | Toggle the formula debugger in tables                                      |
| ~SPC m t t o~ | Toggle the display of Row/Column numbers in tables                         |
| ~SPC m t w~   | Wrap several fields in a column like a paragraph                           |

** Trees

| Key Binding   | Description                     |
|---------------+---------------------------------|
| ~gj~ / ~gk~   | Next/previous element (heading) |
| ~gh~ / ~gl~   | Parent/child element (heading)  |
| ~gH~          | Root heading                    |
| ~ae~          | Element text object             |
| ~ar~          | Subtree text object             |
| ~M-j~ / ~M-k~ | Move heading                    |
| ~M-h~ / ~M-l~ | Promote or demote heading       |
| ~M-J~ / ~M-K~ | Move subtree                    |
| ~M-H~ / ~M-L~ | Promote or demote subtree       |
| ~>>~ / ~<<~   | Promote or demote heading       |
| ~TAB~         | org-cycle                       |
| ~SPC m s a~   | Toggle archive tag for subtree  |
| ~SPC m s A~   | Archive subtree                 |
| ~SPC m s b~   | org-tree-to-indirect-buffer     |
| ~SPC m s l~   | org-demote-subtree              |
| ~SPC m s h~   | org-promote-subtree             |
| ~SPC m s k~   | org-move-subtree-up             |
| ~SPC m s j~   | org-move-subtree-down           |
| ~SPC m s n~   | org-narrow-to-subtree           |
| ~SPC m s N~   | widen narrowed subtree          |
| ~SPC m s r~   | org-refile                      |
| ~SPC m s s~   | show sparse tree                |
| ~SPC m s S~   | sort trees                      |

** Element insertion

| Key Binding   | Description                      |
|---------------+----------------------------------|
| ~SPC m i d~   | org-insert-drawer                |
| ~SPC m i D s~ | Take screenshot                  |
| ~SPC m i D y~ | Yank image url                   |
| ~SPC m i e~   | org-set-effort                   |
| ~SPC m i f~   | org-insert-footnote              |
| ~SPC m i H~   | org-insert-heading-after-current |
| ~SPC m i h~   | org-insert-heading               |
| ~SPC m i K~   | spacemacs/insert-keybinding-org  |
| ~SPC m i l~   | org-insert-link                  |
| ~SPC m i p~   | org-set-property                 |
| ~SPC m i s~   | org-insert-subheading            |
| ~SPC m i t~   | org-set-tags                     |

** Links

| Key Binding | Description       |
|-------------+-------------------|
| ~SPC m x o~ | org-open-at-point |

** Babel / Source Blocks

| Key Binding | Description                              |
|-------------+------------------------------------------|
| ~SPC m b .~ | Enter Babel Transient State              |
| ~SPC m b a~ | org-babel-sha1-hash                      |
| ~SPC m b b~ | org-babel-execute-buffer                 |
| ~SPC m b c~ | org-babel-check-src-block                |
| ~SPC m b d~ | org-babel-demarcate-block                |
| ~SPC m b e~ | org-babel-execute-maybe                  |
| ~SPC m b f~ | org-babel-tangle-file                    |
| ~SPC m b g~ | org-babel-goto-named-src-block           |
| ~SPC m b i~ | org-babel-lob-ingest                     |
| ~SPC m b I~ | org-babel-view-src-block-info            |
| ~SPC m b j~ | org-babel-insert-header-arg              |
| ~SPC m b l~ | org-babel-load-in-session                |
| ~SPC m b n~ | org-babel-next-src-block                 |
| ~SPC m b o~ | org-babel-open-src-block-result          |
| ~SPC m b p~ | org-babel-previous-src-block             |
| ~SPC m b r~ | org-babel-goto-named-result              |
| ~SPC m b s~ | org-babel-execute-subtree                |
| ~SPC m b t~ | org-babel-tangle                         |
| ~SPC m b u~ | org-babel-goto-src-block-head            |
| ~SPC m b v~ | org-babel-expand-src-block               |
| ~SPC m b x~ | org-babel-do-key-sequence-in-edit-buffer |
| ~SPC m b z~ | org-babel-switch-to-session              |
| ~SPC m b Z~ | org-babel-switch-to-session-with-code    |

*** Org Babel Transient State
Use ~SPC m b .~ to enter a transient state for quick source block navigation and
execution.  During that state, the following bindings are active:

| Key Binding | Description                   |
|-------------+-------------------------------|
| ~'~         | edit source block             |
| ~e~         | execute source block          |
| ~g~         | jump to named source block    |
| ~j~         | jump to next source block     |
| ~k~         | jump to previous source block |
| ~q~         | leave transient state         |

** Emphasis

| Key Binding | Description                |
|-------------+----------------------------|
| ~SPC m x b~ | make region bold           |
| ~SPC m x c~ | make region code           |
| ~SPC m x i~ | make region italic         |
| ~SPC m x r~ | clear region emphasis      |
| ~SPC m x s~ | make region strike-through |
| ~SPC m x u~ | make region underline      |
| ~SPC m x v~ | make region verbose        |

** Navigating in calendar

| Key Binding | Description        |
|-------------+--------------------|
| ~M-l~       | One day forward    |
| ~M-h~       | One day backward   |
| ~M-j~       | One week forward   |
| ~M-k~       | One week backward  |
| ~M-L~       | One month forward  |
| ~M-H~       | One month backward |
| ~M-J~       | One year forward   |
| ~M-K~       | One year backward  |

** Capture buffers and src blocks
=org-capture-mode= and =org-src-mode= both support the confirm and abort
conventions.

| Key Binding                                  | Description                            |
|----------------------------------------------+----------------------------------------|
| ~SPC m <dotspacemacs-major-mode-leader-key>~ | confirm in =org-capture-mode=          |
| ~SPC m 'â€‹~                                    | confirm in =org-src-mode=              |
| ~SPC m c~                                    | confirm                                |
| ~SPC m a~                                    | abort                                  |
| ~SPC m k~                                    | abort                                  |
| ~SPC m r~                                    | org-capture-refile in org-capture-mode |

** Org agenda
*** Keybindings
The evilified org agenda supports the following bindings:

| Key Binding          | Description                       |
|----------------------+-----------------------------------|
| ~M-SPC~ or ~s-M-SPC~ | org-agenda transient state        |
| ~SPC m a~            | org-agenda                        |
| ~SPC m C c~          | org-agenda-clock-cancel           |
| ~SPC m C i~          | org-agenda-clock-in               |
| ~SPC m C o~          | org-agenda-clock-out              |
| ~SPC m C p~          | org-pomodoro (if package is used) |
| ~SPC m d d~          | org-agenda-deadline               |
| ~SPC m d s~          | org-agenda-schedule               |
| ~SPC m i e~          | org-agenda-set-effort             |
| ~SPC m i p~          | org-agenda-set-property           |
| ~SPC m i t~          | org-agenda-set-tags               |
| ~SPC m s r~          | org-agenda-refile                 |
| ~M-j~                | next item                         |
| ~M-k~                | previous item                     |
| ~M-h~                | earlier view                      |
| ~M-l~                | later view                        |
| ~gr~                 | refresh                           |
| ~gd~                 | toggle grid                       |
| ~C-v~                | change view                       |
| ~RET~                | org-agenda-goto                   |
| ~M-RET~              | org-agenda-show-and-scroll-up     |

*** Org agenda transient state
Use ~M-SPC~ or ~s-M-SPC~ in an org agenda buffer to activate its transient state.
The transient state aims to list the most useful org agenda commands and
visually organize them by category. The commands associated with each binding
are listed bellow.

| Keybinding  | Description         | Command                           |
|-------------+---------------------+-----------------------------------|
| Entry       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ht~        | set status          | org-agenda-todo                   |
| ~hk~        | kill                | org-agenda-kill                   |
| ~hR~        | refile              | org-agenda-refile                 |
| ~hA~        | archive             | org-agenda-archive-default        |
| ~h:~        | set tags            | org-agenda-set-tags               |
| ~hp~        | set priority        | org-agenda-priority               |
|-------------+---------------------+-----------------------------------|
| Visit entry |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~SPC~       | in other window     | org-agenda-show-and-scroll-up     |
| ~TAB~       | & go to location    | org-agenda-goto                   |
| ~RET~       | & del other windows | org-agenda-switch-to              |
| ~o~         | link                | link-hint-open-link               |
|-------------+---------------------+-----------------------------------|
| Filter      |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ft~        | by tag              | org-agenda-filter-by-tag          |
| ~fr~        | refine by tag       | org-agenda-filter-by-tag-refine   |
| ~fc~        | by category         | org-agenda-filter-by-category     |
| ~fh~        | by top headline     | org-agenda-filter-by-top-headline |
| ~fx~        | by regexp           | org-agenda-filter-by-regexp       |
| ~fd~        | delete all filters  | org-agenda-filter-remove-all      |
|-------------+---------------------+-----------------------------------|
| Date        |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ds~        | schedule            | org-agenda-schedule               |
| ~dS~        | un-schedule         | org-agenda-schedule               |
| ~dd~        | set deadline        | org-agenda-deadline               |
| ~dD~        | remove deadline     | org-agenda-deadline               |
| ~dt~        | timestamp           | org-agenda-date-prompt            |
| ~+~         | do later            | org-agenda-do-date-later          |
| ~-~         | do earlier          | org-agenda-do-date-earlier        |
|-------------+---------------------+-----------------------------------|
| Toggle      |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~tf~        | follow              | org-agenda-follow-mode            |
| ~tl~        | log                 | org-agenda-log-mode               |
| ~ta~        | archive             | org-agenda-archives-mode          |
| ~tr~        | clock report        | org-agenda-clockreport-mode       |
| ~td~        | diaries             | org-agenda-toggle-diary           |
|-------------+---------------------+-----------------------------------|
| View        |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~vd~        | day                 | org-agenda-day-view               |
| ~vw~        | week                | org-agenda-week-view              |
| ~vt~        | fortnight           | org-agenda-fortnight-view         |
| ~vm~        | month               | org-agenda-month-view             |
| ~vy~        | year                | org-agenda-year-view              |
| ~vn~        | next span           | org-agenda-later                  |
| ~vp~        | prev span           | org-agenda-earlier                |
| ~vr~        | reset               | org-agenda-reset-view             |
|-------------+---------------------+-----------------------------------|
| Clock       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~cI~        | in                  | org-agenda-clock-in               |
| ~cO~        | out                 | org-agenda-clock-out              |
| ~cq~        | cancel              | org-agenda-clock-cancel           |
| ~cj~        | jump                | org-agenda-clock-goto             |
|-------------+---------------------+-----------------------------------|
| Other       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~gr~        | reload              | org-agenda-redo                   |
| ~.~         | go to today         | org-agenda-goto-today             |
| ~gd~        | go to date          | org-agenda-goto-date              |

** Pomodoro

| Key Binding | Description       |
|-------------+-------------------|
| ~SPC m C p~ | starts a pomodoro |

** Presentation
org-present must be activated explicitly by typing: ~SPC SPC org-present~

| Key Binding | Description    |
|-------------+----------------|
| ~h~         | previous slide |
| ~l~         | next slide     |
| ~q~         | quit           |

** Org-projectile

| Key Binding       | Description                                             |
|-------------------+---------------------------------------------------------|
| ~SPC a o p~       | Capture a TODO for the current project                  |
| ~SPC u SPC a o p~ | Capture a TODO for any given project (choose from list) |
| ~SPC p o~         | Go to the TODOs for the current project                 |

** Org-journal

| Key Binding   | Description            |
|---------------+------------------------|
| ~SPC a o j j~ | New journal entry      |
| ~SPC a o j s~ | Search journal entries |

Journal entries are highlighted in the calendar. The following key bindings are
available for =calendar-mode= for navigating and manipulating the journal.

| Key Binding | Description                           |
|-------------+---------------------------------------|
| ~SPC m r~   | Read journal entry                    |
| ~SPC m i~   | Insert journal entry for date         |
| ~SPC m n~   | Next journal entry                    |
| ~SPC m p~   | Previous journal entry                |
| ~SPC m s~   | Search all journal entries            |
| ~SPC m w~   | Search calendar week journal entries  |
| ~SPC m m~   | Search calendar month journal entries |
| ~SPC m y~   | Search calendar year journal entries  |

While viewing a journal entry in =org-journal-mode= the following key bindings
are available.

| Key Binding | Description            |
|-------------+------------------------|
| ~SPC m j~   | New journal entry      |
| ~SPC m p~   | Previous journal entry |
| ~SPC m n~   | Next journal entry     |

** Org-brain
*** Application bindings

| Key Binding | Description                  |
|-------------+------------------------------|
| ~SPC a o b~ | Visualize an org-brain entry |

*** Visualization bindings

| Key Binding | Description                           |
|-------------+---------------------------------------|
| ~j / TAB~   | Goto next link                        |
| ~k / S-TAB~ | Goto previous link                    |
| ~c~         | Add child                             |
| ~p~         | Add parent                            |
| ~l~         | Add resource link                     |
| ~C-y~       | Paste resource link                   |
| ~a~         | Add resource [[http://orgmode.org/manual/Attachments.html][attachment]]               |
| ~o~         | Open and edit the visualized entry    |
| ~f~         | Find/visit another entry to visualize |
| ~r~         | Rename this, or another, entry        |
|             |                                       |



* Super Agenda Examples

There are a lot of possibilities, so here are some examples to spark your imagination.  Please do *share* your own examples by posting them on the issue tracker, and I will add them here.  It will be very helpful to others to see your creativity!

*Note:* You can test any of these examples by evaluating the whole =let= form in Emacs (or, if you open this file in Emacs, by executing the code block with =C-c C-c=).

** Contents                                                            :TOC:
- [[#todos][TODOs]]
  - [[#httpspacemacsorglayersemacsorgreadmehtml][http://spacemacs.org/layers/+emacs/org/README.html]]
  - [[#orgtutorial_dto][orgtutorial_dto]]
  - [[#literate-devops][Literate DevOps]]
  - [[#literate-database-work][Literate Database Work]]
  - [[#org-html-themes][org html themes]]
  - [[#eamcsd-dotfiles][eamcs.d dotfiles]]
  - [[#organize-your-life-in-plain-text][Organize Your Life In Plain Text]]
  - [[#the-compact-org-mode-guide][The Compact Org-mode Guide]]
  - [[#the-org-manual][The Org Manual]]
  - [[#my-workflow-with-org-agenda-by-gjstein][my workflow with org-agenda by gjstein]]
    - [[#dotfiles-by-gjstein][dotfiles by gjstein]]
  - [[#teching-programming-to-kids][Teching Programming to Kids]]
  - [[#dig-into-org-mode][Dig into Org Mode]]
  - [[#spacemacs-and-org-mode][Spacemacs and Org-mode]]
- [[#key-bindings][Key bindings]]
  - [[#starting-org-mode][Starting org-mode]]
  - [[#toggles][Toggles]]
  - [[#org-mode][Org-mode]]
  - [[#org-with-evil-org-mode][Org with evil-org-mode]]
  - [[#tables][Tables]]
  - [[#trees][Trees]]
  - [[#element-insertion][Element insertion]]
  - [[#links][Links]]
  - [[#babel--source-blocks][Babel / Source Blocks]]
    - [[#org-babel-transient-state][Org Babel Transient State]]
  - [[#emphasis][Emphasis]]
  - [[#navigating-in-calendar][Navigating in calendar]]
  - [[#capture-buffers-and-src-blocks][Capture buffers and src blocks]]
  - [[#org-agenda][Org agenda]]
    - [[#keybindings][Keybindings]]
    - [[#org-agenda-transient-state][Org agenda transient state]]
  - [[#pomodoro][Pomodoro]]
  - [[#presentation][Presentation]]
  - [[#org-projectile][Org-projectile]]
  - [[#org-journal][Org-journal]]
  - [[#org-brain][Org-brain]]
    - [[#application-bindings][Application bindings]]
    - [[#visualization-bindings][Visualization bindings]]
- [[#super-agenda-examples][Super Agenda Examples]]
  - [[#automatically-by-group][Automatically by group]]
  - [[#automatically-by-category][Automatically by category]]
  - [[#forward-looking][Forward-looking]]
  - [[#log-mode][Log mode]]
  - [[#concrete-dates][Concrete dates]]
  - [[#projects][Projects]]
  - [[#books-to-read][Books to-read]]
  - [[#emacs-and-org-mode-to-do-items][Emacs and Org-mode to-do items]]
  - [[#contributed-examples][Contributed examples]]
    - [[#sebastian-schulze][Sebastian Schulze]]
  - [[#home-example][Home example]]

** Automatically by group

By setting the Org property =agenda-group= and using the =:auto-group= selector, you can automatically sort agenda items into groups.  By default, this property is inherited, so you can set it for an entire subtree of items at once.  For example, if you had this Org file:

#+BEGIN_SRC org
  ,* Tasks
  ,** TODO Take over the universe
     DEADLINE: <2017-08-01 Tue>
  :PROPERTIES:
  :agenda-group: grandiose plans
  :END:
  ,*** TODO Take over the world
      DEADLINE: <2017-07-29 Sat>
  ,*** TODO Take over the moon
      DEADLINE: <2017-07-30 Sun>
  ,*** TODO Take over Mars
      DEADLINE: <2017-07-31 Mon>
  ,** Recurring
  :PROPERTIES:
  :agenda-group: recurring
  :END:

  ,*** TODO Pay Internet bill
      DEADLINE: <2017-07-28 Fri>
#+END_SRC

You could use an agenda command like this:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:auto-group t))))
    (org-agenda-list))
#+END_SRC

And you'd get an agenda looking like this:

[[screenshots/auto-group.png]]

** Automatically by category

In the same way, items can automatically be grouped by their category (which is usually the filename of the buffer they're in).

#+BEGIN_SRC elisp
  (let ((org-super-agenda-groups
         '((:auto-category t))))
    (org-agenda-list))
#+END_SRC

** Forward-looking

Here's an example of a date-oriented, forward-looking agenda grouping.

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:log t)  ; Automatically named "Log"
           (:name "Schedule"
                  :time-grid t)
           (:name "Today"
                  :scheduled today)
           (:habit t)
           (:name "Due today"
                  :deadline today)
           (:name "Overdue"
                  :deadline past)
           (:name "Due soon"
                  :deadline future)
           (:name "Unimportant"
                  :todo ("SOMEDAY" "MAYBE" "CHECK" "TO-READ" "TO-WATCH")
                  :order 100)
           (:name "Waiting..."
                  :todo "WAITING"
                  :order 98)
           (:name "Scheduled earlier"
                  :scheduled past))))
    (org-agenda-list))
#+END_SRC

** Log mode

When the agenda log mode is activated, these groups separate out tasks that you worked on or completed today.  The ~:order-multi~ sets the ~:order~ for each subgroup to ~1~, which makes it display below any groups without a defined ~:order~ (although there are no other groups in this example).

#+BEGIN_SRC elisp
  (let ((org-super-agenda-groups
         '((:order-multi (1 (:name "Done today"
                                   :and (:regexp "State \"DONE\""
                                                 :log t))
                            (:name "Clocked today"
                                   :log t))))))
    (org-agenda-list))
#+END_SRC

If you'd prefer them at the top of the agenda, you could use this:

#+BEGIN_SRC elisp
  (let ((org-super-agenda-groups
         '((:name "Done today"
                  :and (:regexp "State \"DONE\""
                                :log t))
           (:name "Clocked today"
                  :log t))))
    (org-agenda-list))
#+END_SRC

** Concrete dates

Let's say it's approaching the start of a new school year, and you want to see all tasks with a deadline before school starts.  You might use something like this:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:deadline (before "2017-09-01"))
           (:discard (:anything t)))))
    (org-todo-list))
#+END_SRC

Of course, you could also write that as a standard agenda command with the  [[http://orgmode.org/worg/org-tutorials/advanced-searching.html][advanced searching syntax]], and it would execute faster.

What if you wanted to group tasks that are due before the end of the current month?  You could use something like this:

#+BEGIN_SRC elisp
  (-let* (((sec minute hour day month year dow dst utcoff) (decode-time))
          (last-day-of-month (calendar-last-day-of-month month year))
          (target-date
           ;; A hack that seems to work fine.  Yay, Postel!
           (format "%d-%02d-%02d" year month (1+ last-day-of-month)))
          (org-super-agenda-groups
           `((:deadline (before ,target-date))
             (:discard (:anything t)))))
    (org-todo-list))
#+END_SRC

** Projects

With the =:children= selector you can select items that have children.  Assuming items without children aren't considered projects, you can view projects like this:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:name "Projects"
                  :children t)
           (:discard (:anything t)))))
    (org-todo-list))
#+END_SRC

You might want to put that at the end of a daily/weekly agenda view using a custom command that runs a series of agenda commands, like this:

#+BEGIN_SRC elisp :results none
  (let ((org-agenda-custom-commands
         '(("u" "Super view"
            ((agenda "" ((org-super-agenda-groups
                          '((:name "Today"
                                   :time-grid t)))))
             (todo "" ((org-agenda-overriding-header "Projects")
                       (org-super-agenda-groups
                        '((:name none  ; Disable super group header
                                 :children todo)
                          (:discard (:anything t)))))))))))
    (org-agenda nil "u"))
#+END_SRC

Note that the =:children= matcher may be quite slow in views like =org-todo-list= (i.e. the =todo= agenda command in the list above), especially if used to match to-do items.  It would be faster to use =org-agenda-skip-function=.  In a daily/weekly agenda it should perform well enough.

** Books to-read

This shows =TO-READ= to-do items with the tags =:book:= or =:books:=.

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:discard (:not  ; Is it easier to read like this?
                      (:and
                       (:todo "TO-READ" :tag ("book" "books"))))))))
    (org-todo-list))
#+END_SRC

Remember that items that are not matched by a group selector fall through to the next selector or to the catch-all group.  So you might think that this simpler command would work:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:and (:todo "TO-READ" :tag ("book" "books"))))))
    (org-todo-list))
#+END_SRC

But while it would indeed group together those items, it would also display all other to-do items in the =Other items= section below, so you must =:discard= the items you don't want.  So another way to write this query would be to select the items you want and discard everything else:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:name "Books to read"
                  :and (:todo "TO-READ" :tag ("book" "books")))
           (:discard (:anything t)))))
    (org-todo-list))
#+END_SRC

Note that you could run part of this query with a standard agenda command, and it would be faster.  But since the =org-tags-view= and =org-todo-list= can only select by tags or todo-keywords, respectively, the other part of the selection must be done with grouping.  Here are two examples (note that they each produce the same results):

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:discard (:not (:todo "TO-READ"))))))
    (org-tags-view nil "books|book"))

  ;; These commands produce the same results

  (let ((org-super-agenda-groups
         '((:discard (:not (:tag ("book" "books")))))))
    (org-todo-list "TO-READ"))
#+END_SRC

Of course, the most canonical (and probably fastest) way to write this query is to use =org-search-view=, like this:

#+BEGIN_SRC elisp :results none
  (org-search-view t "+{:book\\|books:} +TO-READ")
#+END_SRC

Or if you're inputting the string manually after pressing =C-c a S=, you'd input =+{:book\|books:} +TO-READ=.  But if you're like me, and you forget the [[http://orgmode.org/worg/org-tutorials/advanced-searching.html][advanced searching syntax]], you might find these more "lispy" grouping/selecting constructs easier to use, even if they can be slower on large datasets.

And note that even if you use the built-in searching with =org-search-view=, you might still want to use this package to /group/ results, perhaps like this:

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         '((:name "Computer books"
                  :tag ("computer" "computers" "programming" "software"))
           ;; All other books would be displayed here
           )))
    (org-search-view t "+{:book\\|books:} +TO-READ"))
#+END_SRC

** Emacs and Org-mode to-do items

This shows all to-do items with the =:Emacs:= tag, and groups together anything related to Org.  You can see the use of the =rx= macro by backquoting the list and unquoting the =rx= form.

#+BEGIN_SRC elisp :results none
  (let ((org-super-agenda-groups
         `((:name "Org-related"
                  :tag "Org"
                  :regexp ("org-mode"
                           ,(rx bow "org" eow))))))
    (org-tags-view t "Emacs"))
#+END_SRC

** Contributed examples

*** [[https://github.com/bascht][Sebastian Schulze]]

[[screenshots/bascht.png]]

#+BEGIN_SRC elisp
  (org-super-agenda-groups
   '((:name "Next Items"
            :time-grid t
            :tag ("NEXT" "outbox"))
     (:name "Important"
            :priority "A")
     (:name "Quick Picks"
            :effort< "0:30")
     (:priority<= "B"
                  :scheduled future
                  :order 1)))
#+END_SRC

** Home example

   this was the example from their home page.

#+BEGIN_SRC elisp
(let ((org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "Important"
                ;; Single arguments given alone
                :tag "bills"
                :priority "A")
         ;; Set order of multiple groups at once
         (:order-multi (2 (:name "Shopping in town"
                                 ;; Boolean AND group matches items that match all subgroups
                                 :and (:tag "shopping" :tag "@town"))
                          (:name "Food-related"
                                 ;; Multiple args given in list with implicit OR
                                 :tag ("food" "dinner"))
                          (:name "Personal"
                                 :habit t
                                 :tag "personal")
                          (:name "Space-related (non-moon-or-planet-related)"
                                 ;; Regexps match case-insensitively on the entire entry
                                 :and (:regexp ("space" "NASA")
                                               ;; Boolean NOT also has implicit OR between selectors
                                               :not (:regexp "moon" :tag "planet")))))
         ;; Groups supply their own section names when none are given
         (:todo "WAITING" :order 8)  ; Set order of this section
         (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                ;; Show this group at the end of the agenda (since it has the
                ;; highest number). If you specified this group last, items
                ;; with these todo keywords that e.g. have priority A would be
                ;; displayed in that group instead, because items are grouped
                ;; out in the order the groups are listed.
                :order 9)
         (:priority<= "B"
                      ;; Show this section after "Today" and "Important", because
                      ;; their order is unspecified, defaulting to 0. Sections
                      ;; are displayed lowest-number-first.
                      :order 1)
         ;; After the last group, the agenda will display items that didn't
         ;; match any of these groups, with the default order position of 99
         )))
  (org-agenda nil "a"))
#+END_SRC
